Modelo de caixa: 

tags são a formação de uma caixa
border é a borda da caixa
Padding é o espaçamento interno de caixa
Margin é o espaçamento externo da caixa


-Elementos block: 

ex: h1, p, table...

possui uma largura que ocupa todo espaçamento da tela, ele fica um abaixo do outro

-Elementos Inline: 
ex: a, span, img...

Toda vez que utilizar um elemento inline ele fica um em frente ao outro de acordo com o tamanho do conteudo 

-Elementos Inline-block: 

ex: display: inline-block;

Aqui é um hibrido entre os dois elementos. 

-Posicionamento estatico e relativo

Ex: static, relative, absolute e fixed;

static: é o Posicionamento padrão aplicado nos elementos.

relative: Para utilizar o posicionamento relativo vc precisa utilizar propriedades de deslocamento para movimentar o objeto
são eles: top, right, bottom e left; 

Ou seja position relative é utilizado para movimentar um determinado objeto.

absolute : O elemento que é defido com uma posição absoluta sai do fluxo normal(sua posição atual) e não afeta a posição dos outros elementos.
Aqui a posição do elemento é baseado no container que tiver uma posição diferente da static(padrão).

Fixo : O elemento se tornara fixo em relação a janela do navegador ou viewport, ou seja ficar fixo por toda a pagina.

-Sobrepondo elementos.

z-index é um seletor de camadas do css, habilitando o programador a escolher a camada de cada elemento com de 0 a N. 
Se o numero de dois elementos do z-index for igual a ordem que vai aparecer vai ser padrão.

z-index é um contexto de empilhamento. 

-Como formatar links 

Os links possuem estados, são eles:

1- Links não visitados
a:link{
   color: #b9c941; 
}
2- Links visitados
a:visited{
    color: #c0c0c0;
}
3- Mouse por cima do link
a:hover{
    color: #6d790f
}
4- links ativos, quando voce clica no link{
a:active{
    color: #e4f371;
}

////-////-////-////-////-////-////-////-////-////-////-

-Iniciando JavaScript : 

Incluindo codigos JavaScript dentro do HTML5: 

Pode ser utilizado no inline na propria pagina HTML utilizando 
a tag <script> </script>, assim voce ira introduzir o javascript de uma forma interna

Para aplicar o JavaScript de forma externa, utilizamos a mesma tag 
<script src="script.js"> </script>, mas dessa vez utilizamos um arquivo .js. 

é possivel criar blocos <script> quantas vezes forem necessarias.

A diferença entre escrever a tag <script> na tag head ao inves da tag body é que o <script> será rodado antes 
da tag body, isso pode causa um erro de precedecedência de interpretação. 

-Precedência de execução. 

Nós utilizamos o javascript para interagir com os elementes html, esses elementos html são renderizados com base em uma arvoré de elementos 
que é chamado de DOM(Document Object Model) 

É possivel tirar este erro do precedência colocando a tag script no final do body, dessa forma o script só vai rodar após toda a pagina html 
executada. 

-Variaveis 

Variaveis são espaços em memoria que possibilita armazenar informações de forma temporaria. 
 => Em JavaScript temos:

 Quando estamos declarando uma variavel nós utilizamos a instrução var
-Isso pq a instrução var representa a declaração de uma variavel de uma forma mais rapida

Case sensitive= Diferencia os caracteres maiusculos ou minusculos.

=> Concatenação 
    -Utilizamos o operador + para adicionar uma variavel dentro de um texto; 
    -No JavaScript temos que tumar cuidado ao usar + pq o interpretador pode entender que é uma soma e não uma concatenação.
    -Se voce utiliza uma variavel number dentro de um texto o javascript vai utilizar o valor string do numero. 

=> Atribuição de valores dinamicos prompt
    -Isso vai abrir um dialog para entradas de dados

O interpretador do javascript vai utilizar formas para distiguir variaveis, voce pode notar isso no console.log
    ex: se voce utilizar as duas linhas de codigo abaixo 
    var idade= 45;
    document.write("Olá Pedro, essa é a sua idade "+idade+"?");
    console.log(50);
    console.log(idade);
    No console 45 e 50 vão aparecer com cores diferentes, mostrando assim a diferenca de variaveis.

=> Valores NULL e UNDEFINED 
    UNDEFINED é dando quando acontece a declaração de uma variavel mas não é atribuido um valor a ela no momento, podendo ser atribuido algum tempo depois 
    NULL é quando é declarado um valor para aquela variavel mas seu valor é nulo ou seja não existe nada ali. 

=> Operadores de comparação 
    -Igual ou == 
    -Idêntico ou ===
    -Diferente ou !=
    -Não Idêntico ou !==
    -Menor ou <
    -Maior ou >
    -Menor igual ou <=
    -Maior igual ou >=

    Nos casos de comparação de indentico(===) ou não identico(!==) é preciso levar em conta o tipo de variavel

=> Casting de tipos 
    -> Conversão de um tipo de dado para outro tipo de dado 

=> Operadores Logicos 
    -> Além dos aritmeticos logicos de operações: +,-, * e /
    -> Temos os operadores logicos &&, || e !
    - && ou e, só passa se duas condições forem verdade if(2==2 && 1<=2){verdadeiro}
    - || - ou, passa se uma expressão for verdadeira if(2==3 || "a"=="b"){verdadeiro}
    - ! ou negação, utilizado para negar uma expressão, utilizado para inverter o resultado das expressões, if(!("a"=="b")){vedadeiro}
    - % modulo- Resto existente de uma operação de divisão. 


=>Operador ternario ou resultado  
    - var resultado = nota >= media && faltas <= faltas_maximas ? "Aprovado" : "Reprovado";
    - document.write(resultado);

=> Switch 
    -> switch(opcao){
        case 1:
        break;

        case 2:
        break;

        default: 

        break;
    }

=> Operador aritmeticos na atribuição de valores
    -> Digamos que vc tem uma variavel x e queira atribuir um valor a ela, o mais logico seria x = x + 1; 
    - mas utilizando += voce atribui um valor a variavel sem que repita seu nome, ex: x=10; x += 5; console.log(x)= 15;
    - Para os mesmo podemos fazer o mesmo para a subtração, multiplicação, divisão e para a operação de mod. 

=> Funções 
    -Encapsular um bloco de códigos com um objetivo definido 
    -Declaracao de funcoes: function calcularAreaTerreno(largura, comprimento){
        var area= largura * comprimento;
        return area;
    }
    => Flexibilidade de parametros:
        -Caso vc passe mais parametros que o necessario o JS desconsidera os parametros 
        -Caso vc não passe mais parametros que o necessario o JS considera os parametros não passados como undefined 
        -Caso não passe nenhum parametro o resultado é undefined  

=> Escopo de variaveis: 
    ->Global:
     -Sofre hosting
        -> var serie; 
            ...  
    ->Funcao:
     -Tem acesso a variaveis declaradas no escopo global
     -Funcoes criadas dentro de funcao não sofre hosting, ou seja as funcoes declaradas dentro dele não podem ser acessadas foras dele. 
        -> function x(){
            document.write(serie)
        }

        x();
    ->Bloco:
     -Tem acesso a variaveis declaradas no escopo global
      -Sofre hosting
        -> if(true){
            document.write(serie )
        } 

=>Funcoes anonimas e a tecnica de wrapper 
    => Conceito de wrapper: o js tem uma funcao bem interessante que tem a capacidade de associar a uma variavel não apenas valores mas tbm funcoes: 
        ->var exibirSaudacao = function(nome){
            document.write('Olá '+ nome);
        }
    
        exibirSaudacao('Jorge');
    =>Isso acontece pq utilizamos no js as funcoes de callback 

=>Funcoes de callback:
    - function exibirArtigo(id, callbackSucesso, callbackErro){
       //logica: recuperar o id via requisicao http:
            ...
        //logica de funcoes de callback
        if(true){
            callbackSucesso('sucesso!!');
        } else {
            callbackErro('Erro!');
        }
    }
    //Dessa forma seria dificil de organizar e ai que entra a logica de wrapper
    exibirArtigo(1, function(){}, function(){}, function(){})

    var callbackSucesso = function(){

    };
    var callbackErro = function(){

    };

    exibirArtigo(1, callbackSucesso, callbackErro);

=> Funcoes nativas para manipulacao de strings: 
    -> Cada caraceter de uma string ocupa um posicao sequencia especifica iniciada em 0 

    ou seja Pedro fica = (0,P) (1,e) (2,d) (3,r) (4,o)

    documentacao w3schools.com;
    -O js transforma strings em objetos, por isso é possivel mexer com as mesmas; 
        //Propriedade chamada length 
            ->Esse atributo retorna a quantidaed de caracteres de uma string 
                document.write("Jorge Sant Ana".length) - Isso vai retornar o tamanho dessa string 
                    -Os espaços tambem são contados
        //Propriedade charAt 
            ->Retorna um caraceter com base no indice que o mesmo se encontra; 
                document.write("Jorge Sant Ana".charAt(7)) - Isso vai retornar o caracter contido no indice 7
        //Propriedades indexOf()
            ->Retorna a posicao de uma caraceter relativa a primeira ocorrencia daquela caracter 
                var nome = "Jorge Sant Ana";

                document.write(nome.indexOf('g')) -> Isso vai retornar o indice 3 pq foi onde apareceu pela primeira vez 
                =>caso nao tenha um caraceter fornecido o metodo retorna -1 
        //Propriedade replace
            ->Muda caraceteres 
                var nome = "Jorge Sant Ana";

                document.write(nome.replace('Sant Ana', 'Queiroz')) -> Isso vai substituir Sant Ana por Queiroz 
        //Propriedade substr()
            ->Recorta uma parte da String 
                var nome = "Pedro Wilker";

                document.write(nome.substr(0,6)) - isso vai retornar a 6 caracteres depois do indice zero ou seja = "Pedro W"
        //Propriedades toLowerCase 
            ->Deixa a string em minusculas
        //Propriedaded toUpperCase 
            ->Deixa a string em maiusculos   
        //Propriedade trim
            ->Remove os espacos entre strings e variavelos em um texto
            